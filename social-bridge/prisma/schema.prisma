// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id String @id @default(cuid())

  name          String?
  email         String?   @unique
  emailVerified DateTime?
  username      String?   @unique
  image         String?

  Organization     Organization? @relation(fields: [organizationId], references: [id])
  organizationId   String?
  isApprovedMember Boolean       @default(false)

  TeamMemberDetails   TeamMemberDetails? @relation(fields: [teamMemberDetailsId], references: [id])
  teamMemberDetailsId String?            @unique

  Reviews Review[]

  Messages Message[]

  ChatsWithAi    ChatWithAi[]
  MessagesWithAi MessageWithAi[]

  // Volunteer Profile Properties
  volunteerExperience String?
  volunteerSkills     String?
  volunteerProjects   String?
  volunteerRole       String?
  volunteerStrengths  String?

  @@index([organizationId])
  @@index([teamMemberDetailsId])
}

model Photo {
  id String @id @default(cuid())

  key      String
  fileName String
  url      String

  Event        Event[]
  Organization Organization[]

  isMainPhoto Boolean @default(false)
}

model Address {
  id String @id @default(cuid())

  street  String
  city    String
  zipCode String

  lat Decimal?
  lng Decimal?

  Events       Event[]
  Organization Organization[]
}

enum EventType {
  GROUP_WORKSHOP
  MENTORING
  SCHOLARSHIP
  SHELTERED_WORKSHOP
  FUNDRAISER
}

enum EventStatus {
  PENDING
  ACTIVE
  COMPLETED
}

model Event {
  id String @id @default(cuid())

  eventType   EventType
  eventStatus EventStatus @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title       String
  description String
  startEvent  DateTime
  budget      Int

  Address   Address @relation(fields: [addressId], references: [id])
  addressId String

  EventOrganizer   Organization @relation(fields: [eventOrganizerId], references: [id])
  eventOrganizerId String

  Photos       Photo[]
  Reviews      Review[]
  Partnerships Partnership[]
  EventFunding EventFunding[]

  @@index([addressId])
  @@index([eventOrganizerId])
}

model Review {
  id String @id @default(cuid())

  Event   Event  @relation(fields: [eventId], references: [id])
  eventId String

  value   Int
  comment String

  User   User?   @relation(fields: [userId], references: [id])
  userId String?

  @@index([eventId])
  @@index([userId])
}

enum OrganizationType {
  NGO
  BUSINESS
}

enum PartnershipTag {
  ORGANIZATOR
  ZBIERANIE_LUDZI
  FUNDATOR
  WOLONTARIUSZ
  DOSTARCZYCIEL_MATERIALU
  DOSTARCZYCIEL_MIEJSCA
  DOSTARCZYCIEL_SPRZETU
  IT
}

model Budget {
  id String @id @default(cuid())

  amount      Int
  description String

  EventsFundings EventFunding[]
}

model EventFunding {
  id String @id @default(cuid())

  Event   Event  @relation(fields: [eventId], references: [id])
  eventId String

  Budget   Budget @relation(fields: [budgetId], references: [id])
  budgetId String

  amount Int

  @@index([eventId])
  @@index([budgetId])
}

model Organization {
  id String @id @default(cuid())

  Team User[]

  OrganizationType OrganizationType?

  Address   Address? @relation(fields: [addressId], references: [id])
  addressId String?

  name             String @unique
  shortDescription String
  longDescription  String

  socialGoals          String?
  sociamImpactStrategy String?
  businessGoals        String?

  previousExperience String?
  projectsToRealize  String?

  searchPartnershipTags PartnershipTag[]
  givePartnershipTags   PartnershipTag[]

  OrganizerRelations Partnership[] @relation("Organizer")
  PartnerRelations   Partnership[] @relation("Partner")

  Photos          Photo[]
  NgoRaport       NgoRaport[]
  OrganizedEvents Event[]
  File            File[]

  @@index([addressId])
}

model Partnership {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Organizer   Organization? @relation("Organizer", fields: [organizerId], references: [id])
  organizerId String?

  Partner   Organization? @relation("Partner", fields: [partnerId], references: [id])
  partnerId String?

  Event   Event?  @relation(fields: [eventId], references: [id])
  eventId String?

  Chat   Chat?   @relation(fields: [chatId], references: [id])
  chatId String?

  isAccepted Boolean @default(false)

  givePartnershipTags   PartnershipTag[]
  searchPartnershipTags PartnershipTag[]

  @@index([organizerId])
  @@index([partnerId])
  @@index([organizerId, partnerId])
  @@index([eventId])
  @@index([chatId])
}

model TeamMemberDetails {
  id String @id @default(cuid())

  experience   String?
  skills       String?
  strongPoints String?
  projects     String?
  role         String?

  User User?
}

enum ReportType {
  FINANCIAL
  ACTIVITY
  COMBINED
}

model NgoRaport {
  id String @id @default(cuid())

  Organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Basic information
  reportingYear Int
  reportType    ReportType

  // Financial report information
  balance         Float
  incomeStatement Float
  additionalInfo  String

  // Detailed financial information
  assets          Float
  liabilities     Float
  equity          Float
  revenue         Float
  costs           Float
  financialResult Float

  // Activity report information
  statutoryActivities     String
  publicBenefitActivities String?
  economicActivities      String?

  // Fundraising and administrative costs
  fundraisingCosts    Float?
  administrativeCosts Float?

  // Staff information
  employeesCount  Int
  volunteersCount Int?

  @@index([organizationId])
}

model Chat {
  id String @id @default(cuid())

  Messages    Message[]
  Partnership Partnership[]

  title String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  text String @db.Text()

  User   User   @relation(fields: [userId], references: [id])
  userId String

  Chat   Chat   @relation(fields: [chatId], references: [id])
  chatId String

  @@index([userId])
  @@index([chatId])
}

model ChatWithAi {
  id String @id @default(cuid())

  User   User   @relation(fields: [userId], references: [id])
  userId String

  Messages MessageWithAi[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String

  @@index([userId])
}

model MessageWithAi {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  text String @db.Text()

  isUserMessage     Boolean
  isCoordinatesData Boolean @default(false)

  User   User   @relation(fields: [userId], references: [id])
  userId String

  Chat   ChatWithAi @relation(fields: [chatId], references: [id])
  chatId String

  @@index([userId])
  @@index([chatId])
}

model File {
  id String @id @default(cuid())

  key      String
  fileName String
  url      String

  Organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String

  @@index([organizationId])
}
